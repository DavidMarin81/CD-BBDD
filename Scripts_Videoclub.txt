-- 01.- Devuelve todas las peliculas
SELECT
	*
FROM
	MOVIES
	
-- 02.- Devuelve todos los generos existentes
SELECT
	*
FROM
	GENRES
	
-- 03.- Devuelve la lista de todos los estudios de grabación que estén activos
SELECT * FROM STUDIOS WHERE STUDIO_ACTIVE = 1
SELECT * FROM STUDIOS WHERE STUDIO_ACTIVE IS TRUE
SELECT * FROM STUDIOS WHERE STUDIO_ACTIVE IS NOT FALSE

-- 04.- Devuelve una lista de los 20 últimos miembros en anotarse al videoclub
SELECT
	*
FROM
	MEMBERS
ORDER BY
	MEMBER_EXPIRATION_DATE DESC
LIMIT 20

-- 05.- 5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor.
SELECT
	MOVIE_DURATION,
	COUNT(*) AS FRECUENCY
FROM
	MOVIES
GROUP BY
	MOVIE_DURATION
ORDER BY
	FRECUENCY DESC
LIMIT 20

-- 6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.
SELECT
	*
FROM
	MOVIES
WHERE
	MOVIE_LAUNCH_DATE >= '2000-01-01'
	AND UPPER(MOVIE_NAME) LIKE 'A%'

-- 7. Devuelve los actores nacidos un mes de Junio
SELECT
	*
FROM
	ACTORS
WHERE
	MONTH(ACTOR_BIRTH_DATE) = 6

-- 8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos.
SELECT
	*
FROM
	ACTORS
WHERE
	MONTH(ACTOR_BIRTH_DATE) != 6
	AND ACTOR_DEAD_DATE IS NULL

-- 9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos
SELECT
	DIRECTOR_NAME,
	DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) AS "AGE"
FROM
	DIRECTORS
WHERE
	DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) <= 50
	AND DIRECTOR_DEAD_DATE IS NULL

-- 10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido
SELECT 
	ACTOR_NAME, 
	DATEDIFF(YEAR, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) AS "AGE"
FROM 
	ACTORS 
WHERE 
	DATEDIFF(YEAR, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) <= 50
	AND ACTOR_DEAD_DATE IS NOT NULL

-- 11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos
SELECT
	DIRECTOR_NAME
FROM
	DIRECTORS
WHERE
	DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) <= 40
	AND DIRECTOR_DEAD_DATE IS NULL

-- 12. Indica la edad media de los directores vivos
SELECT
	AVG(DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()))
FROM
	DIRECTORS
WHERE
	DIRECTOR_DEAD_DATE IS NULL

-- 13. Indica la edad media de los actores que han fallecido
SELECT
	AVG(DATEDIFF(YEAR, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE))
FROM
	ACTORS
WHERE ACTOR_DEAD_DATE IS NOT NULL

-- 14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado
SELECT 	
	MOVIES.MOVIE_NAME,
	STUDIOS.STUDIO_NAME
FROM 
	MOVIES
INNER JOIN  
	STUDIOS ON
	MOVIES.STUDIO_ID = STUDIOS.STUDIO_ID
	
-- 15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015
SELECT DISTINCT
	MEMBERS.MEMBER_NAME
FROM 
	MEMBERS
INNER JOIN
	MEMBERS_MOVIE_RENTAL ON
	MEMBERS.MEMBER_ID = MEMBERS_MOVIE_RENTAL.MEMBER_ID
WHERE 	
	YEAR(MEMBERS_MOVIE_RENTAL.MEMBER_RENTAL_DATE) >= 2010
	AND 
	YEAR(MEMBERS_MOVIE_RENTAL.MEMBER_RENTAL_DATE) <= 2015
	
-- 16. Devuelve cuantas películas hay de cada país
SELECT 	
	COUNT(*), NATIONALITIES.NATIONALITY_NAME
FROM
	MOVIES 
INNER JOIN
	NATIONALITIES ON 
	MOVIES.NATIONALITY_ID = NATIONALITIES.NATIONALITY_ID
GROUP BY 
	NATIONALITIES.NATIONALITY_NAME
	
-- 17. Devuelve todas las películas que hay de género documental
SELECT 	
	*
FROM 
	MOVIES 
INNER JOIN
	GENRES ON
	MOVIES.GENRE_ID = GENRES.GENRE_ID
WHERE GENRES.GENRE_NAME = 'Documentary'

SELECT 
	*
FROM 
	MOVIES 
WHERE 
	GENRE_ID = (SELECT GENRE_ID FROM GENRES WHERE GENRE_NAME = 'Documentary')

-- 18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos	
SELECT 
	*
FROM 
	MOVIES 
INNER JOIN
	DIRECTORS ON
	MOVIES.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
WHERE 
	YEAR(DIRECTORS.DIRECTOR_BIRTH_DATE) >= 1980 AND 
	DIRECTORS.DIRECTOR_DEAD_DATE IS NULL
	
SELECT 
	* 
FROM 
	MOVIES 
WHERE 
	DIRECTOR_ID IN 
	(SELECT 
		DIRECTOR_ID 
	FROM 
		DIRECTORS 
	WHERE 
		YEAR(DIRECTOR_BIRTH_DATE) >= 1980 AND 
		DIRECTOR_DEAD_DATE IS NULL)
	
-- 19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores.
SELECT
	M.MEMBER_NAME,
	D.DIRECTOR_NAME,
	D.DIRECTOR_BIRTH_PLACE
FROM
	MEMBERS M
INNER JOIN DIRECTORS D ON
	M.MEMBER_TOWN = D.DIRECTOR_BIRTH_PLACE
	
-- 20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo
SELECT 
	m.MOVIE_NAME, 
	m.MOVIE_LAUNCH_DATE, 
	s.STUDIO_NAME
FROM 
	MOVIES m
INNER JOIN
	STUDIOS s ON
	m.STUDIO_ID = s.STUDIO_ID
WHERE 
	s.STUDIO_ACTIVE IS FALSE
	
-- 21. Devuelve una lista de las últimas 10 películas que se han alquilado
SELECT
	m.MOVIE_NAME
FROM
	MOVIES m
INNER JOIN
	MEMBERS_MOVIE_RENTAL mmr ON
	m.MOVIE_ID = mmr.MOVIE_ID 
ORDER BY 
	mmr.MEMBER_RENTAL_DATE
DESC
LIMIT 10
	
-- 22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años
SELECT 	
	COUNT(m.MOVIE_ID), 
	d.DIRECTOR_NAME 
FROM
	MOVIES m
INNER JOIN
	DIRECTORS d ON
	m.DIRECTOR_ID = d.DIRECTOR_ID
WHERE 
	DATEDIFF(YEAR, d.DIRECTOR_BIRTH_DATE, m.MOVIE_LAUNCH_DATE) < 41
GROUP BY 
	d.DIRECTOR_NAME
	
-- 23. Indica cuál es la media de duración de las películas de cada director	
SELECT 
	AVG(m.MOVIE_DURATION), 
	d.DIRECTOR_NAME
FROM
	MOVIES m
INNER JOIN
	DIRECTORS d ON
	m.DIRECTOR_ID = d.DIRECTOR_ID 
GROUP BY 	
 	d.DIRECTOR_NAME 
ORDER BY 
	d.DIRECTOR_NAME 

	
-- 24. Indica cuál es el nombre y la duración mínima de la película que ha sido alquilada en los últimos 2 años por los miembros del videoclub 
-- (La "fecha de ejecución" en este script es el 25-01-2019)
SELECT 
	m.MOVIE_NAME,
	m.MOVIE_DURATION
FROM
	MOVIES m
INNER JOIN
	MEMBERS_MOVIE_RENTAL mmr ON
	m.MOVIE_ID = mmr.MOVIE_ID
INNER JOIN 	
	MEMBERS mb ON
	mmr.MEMBER_ID = mb.MEMBER_ID
WHERE 
	DATEADD('YEAR', -2, DATE '2019-01-25') < mmr.MEMBER_RENTAL_DATE 
ORDER BY  
	m.MOVIE_DURATION
LIMIT 1

-- 25. Indica el número de películas que hayan hecho los directores durante las décadas 
-- de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título
SELECT
	d.DIRECTOR_NAME,
	COUNT(*) AS NUMERO_PELICULAS
FROM
	DIRECTORS d
JOIN MOVIES m ON
	d.DIRECTOR_ID = m.DIRECTOR_ID
WHERE
	UPPER(m.MOVIE_NAME) LIKE '%THE%'
	AND m.MOVIE_LAUNCH_DATE >= DATE '1960-01-01'
	AND m.MOVIE_LAUNCH_DATE >= DATE '1989-12-31'
GROUP BY
	d.DIRECTOR_NAME
	
-- 26. Lista nombre, nacionalidad y director de todas las películas
SELECT 
	m.MOVIE_NAME, 
	n.NATIONALITY_NAME, 
	d.DIRECTOR_NAME
FROM 
	MOVIES m
INNER JOIN
	DIRECTORS d ON
	m.DIRECTOR_ID = d.DIRECTOR_ID
INNER JOIN 	
	NATIONALITIES n ON
	n.NATIONALITY_ID = m.NATIONALITY_ID
	
-- 27. Muestra las películas con los actores que han participado en cada una de ellas
SELECT 	
	m.MOVIE_NAME,
	a.ACTOR_NAME
FROM 
	MOVIES m
INNER JOIN
	MOVIES_ACTORS ma ON
	m.MOVIE_ID = ma.MOVIE_ID
INNER JOIN 	
	ACTORS a ON
	a.ACTOR_ID = ma.ACTOR_ID
	
-- 28. Indica cual es el nombre del director del que más películas se han alquilado
SELECT 
	d.DIRECTOR_NAME
FROM 
	DIRECTORS d
INNER JOIN
	MOVIES m ON
	d.DIRECTOR_ID = m.DIRECTOR_ID
INNER JOIN 	
	MEMBERS_MOVIE_RENTAL mmr ON
	mmr.MOVIE_ID = m.MOVIE_ID 
GROUP BY 	
	d.DIRECTOR_ID 
ORDER BY 	
	COUNT(*)
DESC LIMIT 1

-- 29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado
SELECT 
	S.STUDIO_NAME, SUM(A.AWARD_WIN) AS "AWARDS_WIN"
FROM
	STUDIOS S
INNER JOIN
	MOVIES M ON
	M.STUDIO_ID = S.STUDIO_ID 
INNER JOIN 	
	AWARDS A ON
	M.MOVIE_ID = A.MOVIE_ID
GROUP BY 
	S.STUDIO_NAME
ORDER BY 
	AWARDS_WIN
DESC

-- 30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido 
-- (Si una película está nominada a un premio, su actor también lo está)
SELECT 
	a.ACTOR_NAME, 
	SUM(aw.AWARD_ALMOST_WIN) AS NOMINATIONS
FROM ACTORS a
INNER JOIN 
	MOVIES_ACTORS ma ON
	a.ACTOR_ID = ma.ACTOR_ID
INNER JOIN 	
	MOVIES m ON
	ma.MOVIE_ID = m.MOVIE_ID 
INNER JOIN 	
	AWARDS aw ON
	m.MOVIE_ID = aw.MOVIE_ID
GROUP BY 	
	a.ACTOR_NAME 
ORDER BY 	
	NOMINATIONS
DESC

-- 31. Indica cuantos actores y directores hicieron películas para los estudios no activos
SELECT
	COUNT(DISTINCT M.DIRECTOR_ID) AS DIRECTOR_NUMBER,
	COUNT(DISTINCT MA.ACTOR_ID) AS ACTOR_NUMBER
FROM
	STUDIOS S
INNER JOIN MOVIES M ON
	M.STUDIO_ID = S.STUDIO_ID
INNER JOIN MOVIES_ACTORS MA ON
	MA.MOVIE_ID = M.MOVIE_ID
WHERE
	S.STUDIO_ACTIVE = FALSE

-- 32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado películas 
-- que hayan sido nominadas a más de 150 premios y ganaran menos de 50

SELECT 
	MB.MEMBER_NAME,
	MB.MEMBER_TOWN,
	MB.MEMBER_PHONE
FROM
	MEMBERS MB
INNER JOIN
	MEMBERS_MOVIE_RENTAL MMR ON
	MB.MEMBER_ID = MMR.MEMBER_ID 
INNER JOIN 	
	MOVIES M ON
	M.MOVIE_ID = MMR.MOVIE_ID 
INNER JOIN 	
	AWARDS A ON
	M.MOVIE_ID = A.MOVIE_ID
WHERE 
	A.AWARD_NOMINATION > 150 AND
	A.AWARD_WIN <= 50
GROUP BY 	
	MB.MEMBER_ID 
ORDER BY 	
	MB.MEMBER_NAME 

-- Otra forma
SELECT
	DISTINCT M.MEMBER_NAME,
	M.MEMBER_TOWN,
	M.MEMBER_PHONE
FROM
	MEMBERS M
INNER JOIN MEMBERS_MOVIE_RENTAL MMR
ON
	M.MEMBER_ID = MMR.MEMBER_ID
WHERE
	MMR.MOVIE_ID IN (
	SELECT
		A.MOVIE_ID
	FROM
		AWARDS A
	WHERE
		A.AWARD_NOMINATION > 150
		AND A.AWARD_WIN < 50)

-- 33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88)
SELECT 
	D.DIRECTOR_NAME,
	MAX(M.MOVIE_LAUNCH_DATE),
	D.DIRECTOR_DEAD_DATE
FROM 
	MOVIES M
INNER JOIN 
	DIRECTORS D ON
	D.DIRECTOR_ID = M.DIRECTOR_ID 
WHERE 	
	D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE
GROUP BY 	
	D.DIRECTOR_NAME, D.DIRECTOR_DEAD_DATE 


-- 34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película 
-- (mediante sentencia SQL)
	
-- Para recuperar la BBDD
UPDATE DIRECTORS D SET DIRECTOR_DEAD_DATE = '1995-05-04' WHERE D.DIRECTOR_ID = 27;
UPDATE DIRECTORS D SET DIRECTOR_DEAD_DATE = '2001-04-08' WHERE D.DIRECTOR_ID = 47;

UPDATE 
	DIRECTORS
SET 	
	DIRECTOR_DEAD_DATE = (
	SELECT
		DATEADD(YEAR, 1, MAX(M.MOVIE_LAUNCH_DATE)) AS LAST_MOVIE
	FROM
		MOVIES M
	INNER JOIN 
		DIRECTORS D ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE
		AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
	GROUP BY
		D.DIRECTOR_NAME,
		D.DIRECTOR_DEAD_DATE)
WHERE 
	DIRECTOR_ID IN (
	SELECT DISTINCT
		D.DIRECTOR_ID
	FROM 
		MOVIES M
	INNER JOIN 
		DIRECTORS D ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	WHERE 	
		D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE)
		
-- Opción usando "MERGE"
MERGE
INTO 
	PUBLIC.DIRECTORS.D
		USING 
	(
	SELECT 
		D.DIRECTOR_ID, 
		DATEADD(YEAR, 1, MAX(M.MOVIE_LAUNCH_DATE)) AS DIRECTOR_DEAD_DATE
	FROM 
		PUBLIC.DIRECTORS D
	INNER JOIN PUBLIC.MOVIES M ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	WHERE 
		D.DIRECTOR_DEAD_DATE IS NOT NULL 
		AND 
		M.MOVIE_LAUNCH_DATE > D.DIRECTOR_DEAD_DATE
	GROUP BY D.DIRECTOR_ID 
	) TOT (DIRECTOR_ID, DIRECTOR_DEAD_DATE)
ON D.DIRECTOR_ID  = TOT.DIRECTOR_ID
	WHEN MATCHED THEN
	  UPDATE SET D.DIRECTOR_DEAD_DATE = TOT.DIRECTOR_DEAD_DATE
	
-- *** 35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película
SELECT
	GROUPID.DIRECTOR_NAME,
	GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME
FROM
	(
	SELECT
		D.DIRECTOR_ID,
		D.DIRECTOR_NAME,
		G.GENRE_ID,
		G.GENRE_NAME,
		COUNT(G.GENRE_NAME) AS NUM_MOVIES
	FROM
		MOVIES M
	INNER JOIN GENRES AS G ON
		M.GENRE_ID = G.GENRE_ID
	INNER JOIN DIRECTORS D ON
		M.DIRECTOR_ID = D.DIRECTOR_ID
	GROUP BY
		G.GENRE_ID,
		D.DIRECTOR_ID
	ORDER BY
		D.DIRECTOR_ID, 
		NUM_MOVIES DESC) GROUPID
INNER JOIN (
	SELECT
		DIRECTOR_ID,
		MAX(NUM_MOVIES) NUM_MOVIES
	FROM
		(
		SELECT
			D.DIRECTOR_ID,
			D.DIRECTOR_NAME,
			G.GENRE_ID,
			G.GENRE_NAME,
			COUNT(G.GENRE_NAME) AS NUM_MOVIES
		FROM
			MOVIES M
		INNER JOIN GENRES AS G ON
			M.GENRE_ID = G.GENRE_ID
		INNER JOIN DIRECTORS D ON
			M.DIRECTOR_ID = D.DIRECTOR_ID
		GROUP BY
			G.GENRE_ID,
			D.DIRECTOR_ID
		ORDER BY
			D.DIRECTOR_ID,
			NUM_MOVIES DESC
			)
	GROUP BY
		DIRECTOR_ID) MAXVAL ON
	GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID
	AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES
GROUP BY
	GROUPID.DIRECTOR_NAME

-- *** 36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas
SELECT 
	GROUPID.STUDIO_NAME,
	GROUP_CONCAT(GROUPID.NATIONALITY_NAME) AS NATIONALITY_NAME
FROM
	(
	SELECT
		S.STUDIO_ID,
		S.STUDIO_NAME,
		N.NATIONALITY_ID,
		N.NATIONALITY_NAME,
		COUNT(N.NATIONALITY_NAME) AS NUM_NATIONALITIES
	FROM
		STUDIOS S
	INNER JOIN
		MOVIES M ON
		S.STUDIO_ID = M.STUDIO_ID
	INNER JOIN 	
		NATIONALITIES N ON
		N.NATIONALITY_ID = M.NATIONALITY_ID
	GROUP BY 	
		S.STUDIO_ID, 
		N.NATIONALITY_ID
	ORDER BY 
		S.STUDIO_ID, 
		NUM_NATIONALITIES DESC) GROUPID
INNER JOIN
(SELECT 
	STUDIO_ID,
	MAX(NUM_NATIONALITIES) NUM_NATIONALITIES
FROM (SELECT
		S.STUDIO_ID,
		S.STUDIO_NAME,
		N.NATIONALITY_ID,
		N.NATIONALITY_NAME,
		COUNT(N.NATIONALITY_NAME) AS NUM_NATIONALITIES
	FROM
		STUDIOS S
	INNER JOIN
		MOVIES M ON
		S.STUDIO_ID = M.STUDIO_ID
	INNER JOIN 	
		NATIONALITIES N ON
		N.NATIONALITY_ID = M.NATIONALITY_ID
	GROUP BY 	
		S.STUDIO_ID, 
		N.NATIONALITY_ID
	ORDER BY 
		S.STUDIO_ID, 
		NUM_NATIONALITIES DESC
		)
GROUP BY 
	STUDIO_ID) MAXVAL ON
	GROUPID.STUDIO_ID = MAXVAL.STUDIO_ID
	AND
	GROUPID.NUM_NATIONALITIES = MAXVAL.NUM_NATIONALITIES
GROUP BY 	
	GROUPID.STUDIO_NAME

	


-- *** 37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos 
-- tengan como último dígito el ID de alguna nacionalidad

-- Peliculas alquiladas por los miembros ordenadas por fecha	
SELECT 
	MB.MEMBER_ID,
	M.MOVIE_ID,
	M.MOVIE_NAME, 
	MMR.MEMBER_MOVIE_RENTAL_ID,
	MMR.MEMBER_RENTAL_DATE
FROM 
	MOVIES M
INNER JOIN
	MEMBERS_MOVIE_RENTAL MMR ON
	M.MOVIE_ID = MMR.MOVIE_ID 
INNER JOIN 	
	MEMBERS MB ON
	MB.MEMBER_ID = MMR.MEMBER_ID
ORDER BY 
	MB.MEMBER_ID,
	MMR.MEMBER_RENTAL_DATE
	
-- Obteniendo la primera pelicula alquilada por cada miembro (id + first_rent)
SELECT 
	MEMBER_ID,
	MIN(MEMBER_RENTAL_DATE) AS FIRST_RENT
FROM 
	(
	SELECT 
	MB.MEMBER_ID,
	M.MOVIE_ID,
	M.MOVIE_NAME, 
	MMR.MEMBER_MOVIE_RENTAL_ID,
	MMR.MEMBER_RENTAL_DATE
	FROM 
		MOVIES M
	INNER JOIN
		MEMBERS_MOVIE_RENTAL MMR ON
		M.MOVIE_ID = MMR.MOVIE_ID 
	INNER JOIN 	
		MEMBERS MB ON
		MB.MEMBER_ID = MMR.MEMBER_ID
	ORDER BY 
		MB.MEMBER_ID,
		MMR.MEMBER_RENTAL_DATE
	)
	GROUP BY 
		MEMBER_ID

		
-- Obtener la pelicula que alquiló por primera vez cada miembro
		
SELECT 
	MEMBER_ID,
	MEMBER_NAME,
	MEMBER_PHONE,
	MOVIE_NAME,
	MEMBER_RENTAL_DATE
FROM 
	(
	SELECT 
	MB.MEMBER_ID,
	MB.MEMBER_NAME,
	MB.MEMBER_PHONE,
	M.MOVIE_ID,
	M.MOVIE_NAME, 
	MMR.MEMBER_MOVIE_RENTAL_ID,
	MMR.MEMBER_RENTAL_DATE
	FROM 
		MOVIES M
	INNER JOIN
		MEMBERS_MOVIE_RENTAL MMR ON
		M.MOVIE_ID = MMR.MOVIE_ID 
	INNER JOIN 	
		MEMBERS MB ON
		MB.MEMBER_ID = MMR.MEMBER_ID
	ORDER BY 
		MB.MEMBER_ID,
		MMR.MEMBER_RENTAL_DATE
	) GENERAL_TABLE
INNER JOIN 
	(
	SELECT 
	MEMBER_ID,
	MIN(MEMBER_RENTAL_DATE) AS FIRST_RENT
	FROM 
		(
		SELECT 
		MB.MEMBER_ID,
		M.MOVIE_ID,
		M.MOVIE_NAME, 
		MMR.MEMBER_MOVIE_RENTAL_ID,
		MMR.MEMBER_RENTAL_DATE
		FROM 
			MOVIES M
		INNER JOIN
			MEMBERS_MOVIE_RENTAL MMR ON
			M.MOVIE_ID = MMR.MOVIE_ID 
		INNER JOIN 	
			MEMBERS MB ON
			MB.MEMBER_ID = MMR.MEMBER_ID
		ORDER BY 
			MB.MEMBER_ID,
			MMR.MEMBER_RENTAL_DATE
		)
		GROUP BY 
			MEMBER_ID

	) FIRST_RENT ON 
GENERAL_TABLE.MEMBER_ID = FIRST_RENT.MEMBER_ID
AND 
GENERAL_TABLE.MEMBER_RENTAL_DATE = FIRST_RENT.FIRST_RENT
GROUP BY 	
	MEMBER_ID,
	MEMBER_NAME,
	MEMBER_PHONE,
	MOVIE_NAME,
	MEMBER_RENTAL_DATE
	

-- Comprobar que los numeros de telefono coinciden con el final de las nacionalidades
SELECT 	
	*
FROM 
 (
 SELECT 
	MEMBER_ID,
	MEMBER_NAME,
	MEMBER_PHONE,
	MOVIE_NAME,
	MEMBER_RENTAL_DATE
FROM 
	(
	SELECT 
	MB.MEMBER_ID,
	MB.MEMBER_NAME,
	MB.MEMBER_PHONE,
	M.MOVIE_ID,
	M.MOVIE_NAME, 
	MMR.MEMBER_MOVIE_RENTAL_ID,
	MMR.MEMBER_RENTAL_DATE
	FROM 
		MOVIES M
	INNER JOIN
		MEMBERS_MOVIE_RENTAL MMR ON
		M.MOVIE_ID = MMR.MOVIE_ID 
	INNER JOIN 	
		MEMBERS MB ON
		MB.MEMBER_ID = MMR.MEMBER_ID
	ORDER BY 
		MB.MEMBER_ID,
		MMR.MEMBER_RENTAL_DATE
	) GENERAL_TABLE
INNER JOIN 
	(
	SELECT 
	MEMBER_ID,
	MIN(MEMBER_RENTAL_DATE) AS FIRST_RENT
	FROM 
		(
		SELECT 
		MB.MEMBER_ID,
		M.MOVIE_ID,
		M.MOVIE_NAME, 
		MMR.MEMBER_MOVIE_RENTAL_ID,
		MMR.MEMBER_RENTAL_DATE
		FROM 
			MOVIES M
		INNER JOIN
			MEMBERS_MOVIE_RENTAL MMR ON
			M.MOVIE_ID = MMR.MOVIE_ID 
		INNER JOIN 	
			MEMBERS MB ON
			MB.MEMBER_ID = MMR.MEMBER_ID
		ORDER BY 
			MB.MEMBER_ID,
			MMR.MEMBER_RENTAL_DATE
		)
		GROUP BY 
			MEMBER_ID

	) FIRST_RENT ON 
GENERAL_TABLE.MEMBER_ID = FIRST_RENT.MEMBER_ID
AND 
GENERAL_TABLE.MEMBER_RENTAL_DATE = FIRST_RENT.FIRST_RENT
GROUP BY 	
	MEMBER_ID,
	MEMBER_NAME,
	MEMBER_PHONE,
	MOVIE_NAME,
	MEMBER_RENTAL_DATE
 ) WHERE	
 	CAST(RIGHT(MEMBER_PHONE, 1)AS INT) IN (SELECT N.NATIONALITY_ID FROM NATIONALITIES N)
 
-- FIN DE LOS EJERCICIOS
